#!/bin/bash
#
# Script for managing docker containers
#
# Copyright Â© 2015 Peter Pakos

### Runtime settings

set -o errexit  # -e
set -o errtrace # -E
set -o nounset  # -u
set -o pipefail

### Variables

N="1"
HOSTNAME="node"
DOMAIN="localdomain"
IMAGE="peterpakos/centos"

_VERSION="15.6.5"
_DIR="$(cd "$(dirname "${0}")" && pwd)"
_FILE="$(basename "${0}")"
_HOSTNAME=$(hostname -s)

TMP_HOSTS="/tmp/${_FILE}_hosts.tmp"

### Functions

error () {
  echo "${_FILE}: ${@}"
  exit 1
}

cleanup () {
  rm -f "${TMP_HOSTS}"
}

singular_plural () {
  if [ "$1" -eq "1" ]; then
    return
  else
    echo "s"
  fi
}

display_version () {
  echo "${_FILE} version ${_VERSION}"
}

display_help () {
  display_version
  cat << EOF
Usage: ${_FILE} COMMAND [OPTIONS]
AVAILABLE COMMANDS AND OPTIONS:
run            Create and run containers
 -n <n>        Number of nodes (default: ${N})
 -h <hostname> Base hostname (default: ${HOSTNAME})
 -d <domain>   Domain (default: ${DOMAIN})
stop [<node>]  Stop containers, all if empty list
start [<node>] Start containers, all if empty list
rm             Remove all containers
list           Print list of containers
help           Print this help summary page
version        Print version number
EXAMPLES:
Start single container centos-server.test.wandisco.com:
  dockermaster run -h centos-server -d test.wandisco.com
Start 5 containers vm1, vm2... vm5 using image wandisco/centos:latest:
  dockermaster run -n 5 -h vm -i wandisco/centos:latest
Stop container called node12:
  dockermaster stop node12
Remove all containers:
  dockermaster rm
EOF
}

check_sudo () {
  if ! sudo -n true &>/dev/null; then
    error "Please set up passwordless sudo for user ${USER} and try again."
  fi
}

check_command () {
  for C in "$@" ; do
    if ! which "${C}" &>/dev/null; then
      error "Command \"${C}\" not found"
    fi
  done
}

docker_run () {
  if [[ ! $N =~ ^[0-9]+$ ]]; then
    error "Number of nodes must be numeric: ${N}"
  fi
  if [ $N -lt 1 -o $N -gt 20 ]; then
    error "Incorrect number of nodes (must be between 1 and 20): ${N}"
  fi
  S=$(singular_plural $N)
  SUCCESS="0"
  echo "Creating and starting ${N} node${S}:"

  for ((i=1;i<=N;i++)); do
    if [ $N -eq 1 ]; then
      CHOSTNAME="${HOSTNAME}"
    else
      CHOSTNAME="${HOSTNAME}${i}"
    fi
    echo -n "- ${CHOSTNAME}.${DOMAIN} "
    if docker inspect "${CHOSTNAME}" &>/dev/null; then
      echo "[ALREADY EXISTS]"
      continue
    fi
    if docker run -d --name "${CHOSTNAME}" -h "${CHOSTNAME}.${DOMAIN}" \
      "${IMAGE}" &>/dev/null; then
      CIP=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' \
        "${CHOSTNAME}")
      echo "(${CIP}) [OK]"
      SUCCESS="1"
    else
      echo "[FAILED]"
    fi
  done
  if [ "$SUCCESS" == "1" ]; then update_hosts; fi
}

docker_stop () {
  if [ "$#" -gt 0 ]; then
    NODES="$@"
    NIDS="$#"
  else
    NODES=$(docker ps -q | tac)
    NIDS=$(echo "${NODES}" | wc -l)
  fi
  if [ -n "${NODES}" ]; then
    S=$(singular_plural $NIDS)
    echo "Stopping ${NIDS} node${S}:"
  else
    echo "No running containers found"
    return 0
  fi
  for NODE in $NODES; do
    if ! CSTATE=$(docker inspect --format '{{ .State.Running }}' "${NODE}" 2>/dev/null); then
      echo "- ${NODE} [NOT FOUND]"
      continue
    else
      if [ "$CSTATE" = "false" ]; then
        echo "- ${NODE} [ALREADY STOPPED]"
        continue;
      fi
    fi
    CIP=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' "${NODE}")
    CHOSTNAME=$(docker inspect --format '{{ .Config.Hostname }}' "${NODE}")
    echo -n "- ${CHOSTNAME} (${CIP}) "
    if docker stop "${NODE}" &>/dev/null; then
      echo "[STOPPED]"
    else
      echo "[FAILED]"
    fi
  done
}

docker_start () {
  if [ $# -gt 0 ]; then
    NODES=$@
    NIDS=$#
  else
    NODES=$(docker ps -q -f "status=exited" | tac)
    NIDS=$(echo "${NODES}" | wc -l)
  fi
  if [ -n "${NODES}" ]; then
    S=$(singular_plural $NIDS)
    echo "Starting ${NIDS} node${S}:"
  else
    echo "No stopped containers found"
    return 0
  fi
  for NODE in $NODES; do
    if ! CSTATE=$(docker inspect --format '{{ .State.Running }}' "${NODE}" 2>/dev/null); then
      echo "- ${NODE} [NOT FOUND]"
      continue
    else
      if [ "$CSTATE" = "true" ]; then
        echo "- ${NODE} [ALREADY RUNNING]"
        continue;
      fi
    fi
    CHOSTNAME=$(docker inspect --format '{{ .Config.Hostname }}' "${NODE}")
    echo -n "- ${CHOSTNAME} "
    if docker start "${NODE}" &>/dev/null; then
      CIP=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' "${NODE}")
      echo "[STARTED] (${CIP})"
    else
      echo "[FAILED]"
    fi
  done
}

docker_rm () {
  if [ "$#" -gt 0 ]; then
    NODES="$@"
    NIDS="$#"
  else
    NODES=$(docker ps -q -a | tac)
    NIDS=$(echo "${NODES}" | wc -l)
  fi
  if [ -n "${NODES}" ]; then
    S=$(singular_plural $NIDS)
    echo "Removing ${NIDS} node${S}:"
  else
    echo "No containers found"
    return 0
  fi
  SUCCESS="0"
  for NODE in $NODES; do
    if ! CSTATE=$(docker inspect --format '{{ .State.Running }}' "${NODE}" 2>/dev/null); then
      echo "- ${NODE} [NOT FOUND]"
      continue
    else
      CHOSTNAME=$(docker inspect --format '{{ .Config.Hostname }}' "${NODE}")
      CDOMAIN=$(docker inspect --format '{{ .Config.Domainname }}' "${NODE}")
      echo -n "- ${CHOSTNAME}.${CDOMAIN} "
      if [ "$CSTATE" = "true" ]; then
        echo -n "[STOPPING] "
        if ! docker stop "${NODE}" &>/dev/null; then
          echo "[FAILED]"
          continue
        fi
      fi
    fi
    CHOSTNAME=$(docker inspect --format '{{ .Config.Hostname }}' "${NODE}")
    if docker rm "${NODE}" &>/dev/null; then
      echo "[REMOVED]"
      SUCCESS="1"
    else
      echo "[FAILED]"
    fi
  done
  if [ "$SUCCESS" == "1" ]; then update_hosts; fi
}

docker_list () {
  IDS=$(docker ps -q -a | tac)
  if [ -n "${IDS}" ]; then
    NIDS=$(echo "${IDS}" | wc -l)
    S=$(singular_plural $NIDS)
    echo "Found ${NIDS} container${S}:"
  else
    echo "No containers found"
    return 0
  fi
  for ID in $IDS; do
    CHOSTNAME=$(docker inspect --format '{{ .Config.Hostname }}' "${ID}")
    CDOMAIN=$(docker inspect --format '{{ .Config.Domainname }}' "${ID}")
    CIP=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' "${ID}")
    CSTATE=$(docker inspect --format '{{ .State.Running }}' "${ID}")
    if [ "${CSTATE}" == "true" ]; then
      echo "- ${CHOSTNAME}.${CDOMAIN} [RUNNING] (${CIP})"
    else
      echo "- ${CHOSTNAME}.${CDOMAIN} [STOPPED]"
    fi
  done
}

update_hosts () {
  echo -n "Updating /etc/hosts file "
  echo -e "127.0.0.1\tlocalhost.localdomain localhost" \
    > ${TMP_HOSTS}
  IDS=$(docker ps -q -a | tac)
  for ID in $IDS; do
    CIP=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' "${ID}")
    CHOSTNAME=$(docker inspect --format '{{ .Config.Hostname }}' "${ID}")
    CDOMAIN=$(docker inspect --format '{{ .Config.Domainname }}' "${ID}")
    echo -e "${CIP}\t${CHOSTNAME}.${CDOMAIN} ${CHOSTNAME}" >> ${TMP_HOSTS}
  done
  if sudo mv ${TMP_HOSTS} /etc/hosts &>/dev/null; then
    echo -n "[OK]"
  else
    echo "[FAILED]"
    return 1
  fi
  if [ -n "$IDS" ]; then
    echo -n ", syncing with containers "
    if docker ps -q -a | xargs docker inspect -f '{{.HostsPath}}' | xargs -n1 sudo cp /etc/hosts; then
      echo "[OK]"
    else
      echo "[FAILED]"
      return 1
    fi
  else
    echo
  fi
}

### Main code

check_sudo
check_command "docker"

# Check arguments

if [ $# = 0 ]; then
  display_help
  exit 1
fi

case "$1" in
  run)
    OPTIND=2
    while getopts ":n:h:d:i:" OPT; do
      case ${OPT} in
      n)
        N=${OPTARG}
       ;;
      h)
        HOSTNAME=${OPTARG}
        ;;
      d)
        DOMAIN=${OPTARG}
        ;;
      i)
        IMAGE=${OPTARG}
        ;;
      :)
        echo "Option -${OPTARG} requires an argument."
        exit 1
        ;;
      *)
        echo "Invalid option: -${OPTARG}"
        exit 1
        ;;
      esac
    done
    docker_run
    ;;
  stop)
    if [ $# -ge 2 ]; then
      NODES="${@:2}"
    else
      NODES=""
    fi
    docker_stop $NODES
    ;;
  start)
    if [ $# -ge 2 ]; then
      NODES="${@:2}"
    else
      NODES=""
    fi
    docker_start $NODES
    ;;
  rm)
    if [ $# -ge 2 ]; then
      NODES="${@:2}"
    else
      NODES=""
    fi
    docker_rm $NODES
    ;;
  list)
    docker_list
    ;;
  version)
    display_version
    exit 0
    ;;
  help)
    display_help
    exit 0
    ;;

  *)
    echo "Invalid command: ${1}"
    exit 1
    ;;
esac

exit 0
